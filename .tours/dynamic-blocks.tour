{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "dynamic-blocks",
  "steps": [
    {
      "directory": "aws_ec2_subnets",
      "description": "The **aws_subnets** directory contains two subdirectories: **original** and **refactor**. Each folder contains a **main.tf** file. \n\nIn this lab, you will refactor the Terraform configuration defined in the **original/main.tf** file. The refactored template will use dynamic blocks and iterable variables to improve the maintainability of the template.\n\nYou will only be deploying resources defined in the **refactor/main.tf** file.\n\nClick **Next** to review the original Terraform template."
    },
    {
      "file": "aws_subnets/original/main.tf",
      "selection": {
        "start": {
          "line": 14,
          "character": 1
        },
        "end": {
          "line": 23,
          "character": 2
        }
      },
      "description": "An `aws_vpc` resource is defined with a CIDR block of `10.0.0.0/16` and is configured with the following tags:\n\n- Team\n- DeploymentType\n- Environment\n- Project\n\nAs resources are added to this Terraform template, you can assume that more AWS resources will require similar tags. However, providing these tags manually on each new resource will add to a project's overhead."
    },
    {
      "file": "aws_subnets/original/main.tf",
      "selection": {
        "start": {
          "line": 26,
          "character": 1
        },
        "end": {
          "line": 29,
          "character": 44
        }
      },
      "description": "The `aws_security_group` resource is configured within the `aws_vpc`. The purpose of this security group is to define ingress and egress rules to allow or deny traffic to resources within the VPC.\n\nEach security group can contain one or more ingress or egress rules. These rules begin to add up within the security group definition and are a perfect use case for Terraform dynamic blocks.\n\nThe security group is configured with four rules."
    },
    {
      "file": "aws_subnets/original/main.tf",
      "selection": {
        "start": {
          "line": 31,
          "character": 1
        },
        "end": {
          "line": 43,
          "character": 4
        }
      },
      "description": "Allow inbound traffic on Port 80 (HTTP) and 443 (HTTPS) from the public internet."
    },
    {
      "file": "aws_subnets/original/main.tf",
      "selection": {
        "start": {
          "line": 45,
          "character": 1
        },
        "end": {
          "line": 50,
          "character": 4
        }
      },
      "description": "Allow inbound traffic on Port 22 (SSH) that originates from within the Amazon VPC CIDR block. This will allow only resources within the VPC to SSH into any EC2 instances associated with this security group."
    },
    {
      "file": "aws_subnets/original/main.tf",
      "selection": {
        "start": {
          "line": 52,
          "character": 1
        },
        "end": {
          "line": 57,
          "character": 4
        }
      },
      "description": "Allow all outbound traffic to the public internet."
    },
    {
      "directory": "aws_subnets/refactor",
      "description": "Dynamic blocks are similar to the **count** and **for_each** meta-arguments in that they are designed to create multiple identical or similar resources.\n\nDynamic blocks, however, are more suitable for configuring duplicate attributes *within* a resource. In the examples that follow, you will learn how to use dynamic blocks in conjunction with the **for_each** meta-argument to simplify these resource definitions."
    },
    {
      "file": "aws_subnets/refactor/main.tf",
      "description": "Local variables\n\n```js\n# Locals\n\nlocals {\n  vpc_cidr = \"10.0.0.0/16\"\n  tags = {\n    Team           = \"cloudacademy\"\n    DeploymentType = \"terraform\"\n    Environment    = \"development\"\n    Project        = \"dynamic-blocks\"\n  }\n  ingress_rules = [\n    {\n      port        = 80,\n      protocol    = \"tcp\"\n      cidr_blocks = [\"0.0.0.0/0\"]\n    },\n    {\n      port        = 443,\n      protocol    = \"tcp\"\n      cidr_blocks = [\"0.0.0.0/0\"]\n    },\n    {\n      port        = 22,\n      protocol    = \"tcp\"\n      cidr_blocks = [local.vpc_cidr]\n    }\n  ]\n  egress_rules = [\n    {\n      port        = 0,\n      protocol    = \"tcp\"\n      cidr_blocks = [\"0.0.0.0/0\"]\n    }\n  ]\n}\n\n\n```",
      "line": 120
    },
    {
      "file": "aws_subnets/refactor/main.tf",
      "selection": {
        "start": {
          "line": 17,
          "character": 1
        },
        "end": {
          "line": 23,
          "character": 4
        }
      },
      "description": "VPC cidr block defined as a local variable since it'll be used for both resources\n\ntags stored as a single object to keep template D.R.Y. and allow developers to update tags in one place.\n\nDisclaimer about `default_tags` Terraform element. This is for demonstration purposes, and used to highlight how to iterate over a single map in a dynamic block."
    },
    {
      "file": "aws_subnets/refactor/main.tf",
      "selection": {
        "start": {
          "line": 24,
          "character": 1
        },
        "end": {
          "line": 29,
          "character": 7
        }
      },
      "description": "Ingress and egress sg rules stored a lists of objects to be iterated over with a dynamic block."
    },
    {
      "file": "aws_subnets/refactor/main.tf",
      "description": "VPC\n\n```js\n# Resources\n\nresource \"aws_vpc\" \"lab_vpc\" {\n  cidr_block = local.vpc_cidr\n\n  # Tags\n  dynamic \"tag\" {\n    for_each = local.tags\n    content {\n      key   = tag.key\n      value = tag.value\n    }\n  }\n}\n\n\n```",
      "line": 78
    },
    {
      "file": "aws_subnets/refactor/main.tf",
      "selection": {
        "start": {
          "line": 56,
          "character": 1
        },
        "end": {
          "line": 62,
          "character": 4
        }
      },
      "description": "dynamic block tag description\n- for_each iterator\n- tag element\n- content block\n- key and value"
    },
    {
      "file": "aws_subnets/refactor/main.tf",
      "description": "Security Group\n\n```js\nresource \"aws_security_group\" \"sg-webserver\" {\n  vpc_id      = aws_vpc.lab_vpc.id\n  name        = \"sg-webserver\"\n  description = \"Web Server Security Group\"\n\n  dynamic \"ingress\" {\n    for_each = local.ingress_rules\n    content {\n      from_port   = ingress.value.port\n      to_port     = ingress.value.port\n      protocol    = ingress.value.protocol\n      cidr_blocks = ingress.value.cidr_blocks\n    }\n  }\n\n  dynamic \"egress\" {\n    for_each = local.egress_rules\n    content {\n      from_port   = egress.value.port\n      to_port     = egress.value.port\n      protocol    = egress.value.protocol\n      cidr_blocks = egress.value.cidr_blocks\n    }\n  }\n}\n```",
      "line": 113
    },
    {
      "file": "aws_subnets/refactor/main.tf",
      "selection": {
        "start": {
          "line": 70,
          "character": 1
        },
        "end": {
          "line": 78,
          "character": 4
        }
      },
      "description": "Iterating over a list of objects and using the key names to access the specific values."
    }
  ]
}